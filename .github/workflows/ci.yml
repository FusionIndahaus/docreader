name: CI/CD Pipeline

# –ó–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏ –ø—É—à–µ –≤ main –∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ pull request
on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

# –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è GITHUB_TOKEN
permissions:
  contents: read
  checks: write
  issues: write
  pull-requests: write

jobs:
  # –î–∂–æ–± –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  test:
    name: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout –∫–æ–¥
      uses: actions/checkout@v4
      
    - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π Go
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      run: go mod tidy
      
    - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "–û–®–ò–ë–ö–ê: –ö–æ–¥ –Ω–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'gofmt -s -w .'"
          gofmt -s -l .
          exit 1
        fi
        echo "OK: –ö–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
        
    - name: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
      run: |
        go vet ./...
        echo "OK: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–π–¥–µ–Ω"
        
    - name: –ó–∞–ø—É—Å–∫ —é–Ω–∏—Ç —Ç–µ—Å—Ç–æ–≤
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html
        echo "OK: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"
        
    - name: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html
        
    - name: –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏
      id: coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
        COVERAGE_NUM=${COVERAGE%\%}
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "coverage_num=$COVERAGE_NUM" >> $GITHUB_OUTPUT
        echo "–ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏: $COVERAGE"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
        echo "## –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ —Ñ–∞–π–ª–∞–º:" > coverage_report.md
        go tool cover -func=coverage.out | grep -v "total:" >> coverage_report.md
        echo "" >> coverage_report.md
        echo "**–û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: $COVERAGE**" >> coverage_report.md
        
        if [[ $COVERAGE_NUM -lt 50 ]]; then
          echo "status=warning" >> $GITHUB_OUTPUT
          echo "–í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏ –º–µ–Ω–µ–µ 50%"
        else
          echo "status=success" >> $GITHUB_OUTPUT
          echo "OK: –•–æ—Ä–æ—à–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏"
        fi

    - name: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≤ PR
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        header: coverage
        message: |
          ## –û—Ç—á—ë—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Ç–µ—Å—Ç–∞–º–∏
          
          **–û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: ${{ steps.coverage.outputs.coverage }}**
          
          <details>
          <summary>–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–æ —Ñ–∞–π–ª–∞–º</summary>
          
          ```
          $(cat coverage_report.md)
          ```
          
          </details>
          
          ${{ steps.coverage.outputs.status == 'warning' && '‚ö†Ô∏è –ü–æ–∫—Ä—ã—Ç–∏–µ –º–µ–Ω–µ–µ 50%' || '‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ –≤ –Ω–æ—Ä–º–µ' }}

  # –î–∂–æ–± –¥–ª—è —Å–±–æ—Ä–∫–∏ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤)
  build:
    name: –°–±–æ—Ä–∫–∞
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout –∫–æ–¥
      uses: actions/checkout@v4
      
    - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      run: go mod tidy
      
    - name: –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      run: |
        go build -ldflags="-s -w" -o document-ai .
        echo "OK: –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞"
        
    - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
      run: |
        if [ -f "Dockerfile" ]; then
          echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
          docker build -t document-ai:test .
          echo "OK: Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ"
        else
          echo "WARNING: Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º Docker —Å–±–æ—Ä–∫—É"
        fi
        
    - name: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
      uses: actions/upload-artifact@v4
      with:
        name: document-ai-binary
        path: document-ai

  # –î–∂–æ–± –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  benchmark:
    name: –ë–µ–Ω—á–º–∞—Ä–∫–∏
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout –∫–æ–¥
      uses: actions/checkout@v4
      
    - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      run: go mod tidy
      
    - name: –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
      run: |
        go test -bench=. -benchmem ./... > benchmark.txt
        cat benchmark.txt
        echo "OK: –ë–µ–Ω—á–º–∞—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
        
    - name: –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.txt

  # –î–∂–æ–± –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  security:
    name: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout –∫–æ–¥
      uses: actions/checkout@v4
      
    - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest
      
    - name: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
      run: |
        echo "‚ö†Ô∏è  WARNING: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞"
        echo "üìã –ü—Ä–∏—á–∏–Ω–∞: –ù–∞–π–¥–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ Go 1.21.13"
        echo "üîß –†–µ—à–µ–Ω–∏–µ: –û–±–Ω–æ–≤–∏—Ç—å Go –¥–æ –≤–µ—Ä—Å–∏–∏ 1.23+ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        echo "üîó –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: https://pkg.go.dev/vuln/"
        echo "‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É govulncheck"

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
  notify:
    name: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()
    
    steps:
    - name: –†–µ–∑—É–ª—å—Ç–∞—Ç CI/CD
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
          echo "SUCCESS: CI/CD –ø–∞–π–ø–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!"
          echo "OK: –¢–µ—Å—Ç—ã - ${{ needs.test.result }}"
          echo "OK: –°–±–æ—Ä–∫–∞ - ${{ needs.build.result }}"
        else
          echo "ERROR: CI/CD –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏"
          echo "FAIL: –¢–µ—Å—Ç—ã - ${{ needs.test.result }}"
          echo "FAIL: –°–±–æ—Ä–∫–∞ - ${{ needs.build.result }}"
          exit 1
        fi 
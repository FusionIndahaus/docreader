# Document AI - Makefile
# –£–¥–æ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

.PHONY: help build test test-verbose test-race test-coverage clean run fmt vet lint deps security benchmark docker

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BINARY_NAME=document-ai
VERSION?=dev
BUILD_TIME=$(shell date +%Y-%m-%dT%H:%M:%S%z)
LDFLAGS=-ldflags "-s -w -X main.version=$(VERSION) -X main.buildTime=$(BUILD_TIME)"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN=\033[0;32m
BLUE=\033[0;34m
YELLOW=\033[1;33m
RED=\033[0;31m
NC=\033[0m # No Color

## help: –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
help:
	@echo "$(BLUE)Document AI - –ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏$(NC)"
	@echo ""
	@echo "$(GREEN)–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@sed -n 's/^##//p' ${MAKEFILE_LIST} | column -t -s ':' | sed -e 's/^/ /'

## build: –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
build:
	@echo "$(GREEN)–°–±–æ—Ä–∫–∞ $(BINARY_NAME)...$(NC)"
	go build $(LDFLAGS) -o $(BINARY_NAME) .
	@echo "$(GREEN)OK: –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: $(BINARY_NAME)$(NC)"

## run: –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
run: build
	@echo "$(GREEN)–ó–∞–ø—É—Å–∫ $(BINARY_NAME)...$(NC)"
	./$(BINARY_NAME)

## test: –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
test:
	@echo "$(GREEN)–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	go test -v ./...
	@echo "$(GREEN)OK: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã$(NC)"

## test-verbose: –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
test-verbose:
	@echo "$(GREEN)–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ (–ø–æ–¥—Ä–æ–±–Ω–æ)...$(NC)"
	go test -v -race ./...

## test-race: –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥–æ–Ω–æ–∫
test-race:
	@echo "$(GREEN)–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥–æ–Ω–æ–∫...$(NC)"
	go test -race ./...

## test-coverage: –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
test-coverage:
	@echo "$(GREEN)–ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–æ–≤...$(NC)"
	go test -coverprofile=coverage.out ./...
	go tool cover -func=coverage.out
	@echo "$(GREEN)–ü–æ–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ$(NC)"

## benchmark: –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–Ω—á–º–∞—Ä–∫–∏
benchmark:
	@echo "$(GREEN)–ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤...$(NC)"
	go test -bench=. -benchmem ./...

## fmt: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
fmt:
	@echo "$(GREEN)–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...$(NC)"
	go fmt ./...
	@echo "$(GREEN)OK: –ö–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω$(NC)"

## vet: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
vet:
	@echo "$(GREEN)–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑...$(NC)"
	go vet ./...
	@echo "$(GREEN)OK: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–π–¥–µ–Ω$(NC)"

## lint: –õ–∏–Ω—Ç–µ—Ä (golangci-lint)
lint:
	@echo "$(GREEN)–ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–µ—Ä–∞...$(NC)"
	@if command -v golangci-lint >/dev/null 2>&1; then \
		golangci-lint run; \
		echo "$(GREEN)OK: –õ–∏–Ω—Ç–µ—Ä –ø—Ä–æ–π–¥–µ–Ω$(NC)"; \
	else \
		echo "$(YELLOW)WARNING: golangci-lint –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest$(NC)"; \
	fi

## security: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
security:
	@echo "$(YELLOW)‚ö†Ô∏è  WARNING: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞$(NC)"
	@echo "$(YELLOW)üìã –ü—Ä–∏—á–∏–Ω–∞: –ù–∞–π–¥–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ Go 1.21.13$(NC)"
	@echo "$(YELLOW)üîß –†–µ—à–µ–Ω–∏–µ: –û–±–Ω–æ–≤–∏—Ç—å Go –¥–æ –≤–µ—Ä—Å–∏–∏ 1.23+ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è$(NC)"
	@echo "$(YELLOW)üîó –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: https://pkg.go.dev/vuln/$(NC)"
	@if command -v govulncheck >/dev/null 2>&1; then \
		echo "$(YELLOW)–ó–∞–ø—É—Å–∫–∞–µ–º govulncheck –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...$(NC)"; \
		govulncheck ./... || echo "$(YELLOW)–ù–∞–π–¥–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ Go$(NC)"; \
	else \
		echo "$(YELLOW)govulncheck –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω$(NC)"; \
	fi
	@echo "$(GREEN)OK: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏)$(NC)"

## deps: –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
deps:
	@echo "$(GREEN)–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	go mod tidy
	go mod download
	@echo "$(GREEN)OK: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

## clean: –û—á–∏—Å—Ç–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–±–æ—Ä–∫–∏
clean:
	@echo "$(GREEN)–û—á–∏—Å—Ç–∫–∞...$(NC)"
	rm -f $(BINARY_NAME)
	rm -f coverage.out
	rm -rf builds/
	@echo "$(GREEN)OK: –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

## docker: –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑
docker:
	@echo "$(GREEN)–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞...$(NC)"
	docker build -t $(BINARY_NAME):$(VERSION) .
	docker build -t $(BINARY_NAME):latest .
	@echo "$(GREEN)OK: Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω: $(BINARY_NAME):$(VERSION)$(NC)"

## docker-run: –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ Docker
docker-run: docker
	@echo "$(GREEN)–ó–∞–ø—É—Å–∫ –≤ Docker...$(NC)"
	docker run -p 8080:8080 --env-file .env $(BINARY_NAME):latest

## build-all: –°–æ–±—Ä–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
build-all:
	@echo "$(GREEN)–°–±–æ—Ä–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º...$(NC)"
	mkdir -p builds/
	
	# Linux AMD64
	GOOS=linux GOARCH=amd64 go build $(LDFLAGS) -o builds/$(BINARY_NAME)-linux-amd64 .
	
	# Linux ARM64
	GOOS=linux GOARCH=arm64 go build $(LDFLAGS) -o builds/$(BINARY_NAME)-linux-arm64 .
	
	# Windows AMD64
	GOOS=windows GOARCH=amd64 go build $(LDFLAGS) -o builds/$(BINARY_NAME)-windows-amd64.exe .
	
	# macOS AMD64
	GOOS=darwin GOARCH=amd64 go build $(LDFLAGS) -o builds/$(BINARY_NAME)-macos-amd64 .
	
	# macOS ARM64
	GOOS=darwin GOARCH=arm64 go build $(LDFLAGS) -o builds/$(BINARY_NAME)-macos-arm64 .
	
	@echo "$(GREEN)OK: –°–±–æ—Ä–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"
	@ls -la builds/

## check: –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
check: fmt vet test-race security
	@echo "$(GREEN)OK: –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

## dev: –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ + —Ç–µ—Å—Ç—ã + –∑–∞–ø—É—Å–∫)
dev: fmt test run

## deploy: –î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
deploy:
	@echo "$(GREEN)–î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä...$(NC)"
	./deploy.sh
	@echo "$(GREEN)OK: –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω$(NC)"

## restart-server: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
restart-server:
	@echo "$(GREEN)–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...$(NC)"
	ssh root@45.82.153.200 "systemctl restart n8nuploader && systemctl status n8nuploader --no-pager"
	@echo "$(GREEN)OK: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ$(NC)"

## ci: CI/CD –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∫–∞–∫ –≤ GitHub Actions)
ci: fmt vet test-race test-coverage security
	@echo "$(GREEN)OK: CI/CD –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(NC)" 
package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"mime/multipart"
	"net/http"
	"path/filepath"
	"strings"
	"sync"
	"time"
)

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const (
	// URL –≤–µ–±—Ö—É–∫–∞ n8n - —Å—é–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
	n8nWebhookURL = "https://qbitagents.app.n8n.cloud/webhook-test/d8f99a21-dc92-4dac-9746-6581ce15df8f"
	serverPort    = "8080"
	maxFileSize   = 50 << 20 // 50MB - –¥—É–º–∞—é, —Ö–≤–∞—Ç–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
	maxResponses  = 20       // —Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –æ—Ç–≤–µ—Ç–æ–≤
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
type DocumentRequest struct {
	Message  string `json:"message"`
	FileName string `json:"fileName"`
}

type ProcessingResponse struct {
	ID        string    `json:"id"`
	Text      string    `json:"text"`
	Timestamp time.Time `json:"timestamp"`
	Status    string    `json:"status"`
}

type APIResponse struct {
	Status  string      `json:"status"`
	Message string      `json:"message,omitempty"`
	Data    interface{} `json:"data,omitempty"`
}

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// –î–∞, –∑–Ω–∞—é —á—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –æ—á–µ–Ω—å, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–æ–π–¥–µ—Ç
var (
	responses      []ProcessingResponse
	responsesMutex sync.RWMutex // RWMutex —á—Ç–æ–±—ã —á–∏—Ç–∞—Ç—å –º–æ–≥–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ä—É—Ç–∏–Ω –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
)

func main() {
	setupRoutes()
	startServer()
}

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Å–µ —Ä–æ—É—Ç—ã
func setupRoutes() {
	// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (CSS, JS, –∫–∞—Ä—Ç–∏–Ω–∫–∏ –µ—Å–ª–∏ –±—É–¥—É—Ç)
	fs := http.FileServer(http.Dir("static"))
	http.Handle("/static/", http.StripPrefix("/static/", fs))

	// –û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
	http.HandleFunc("/", handleHome)              // –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
	http.HandleFunc("/upload", handleFileUpload)  // –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
	http.HandleFunc("/webhook", handleN8nWebhook) // –ø—Ä–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –æ—Ç n8n
	http.HandleFunc("/results", handleGetResults) // –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	http.HandleFunc("/health", handleHealthCheck) // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞

	log.Println("üöÄ –†–æ—É—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
func startServer() {
	log.Printf("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É %s", serverPort)
	log.Printf("–û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:%s –≤ –±—Ä–∞—É–∑–µ—Ä–µ", serverPort)

	if err := http.ListenAndServe(":"+serverPort, nil); err != nil {
		log.Fatal("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:", err)
	}
}

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –ø—Ä–æ—Å—Ç–æ –æ—Ç–¥–∞–µ–º index.html
func handleHome(w http.ResponseWriter, r *http.Request) {
	// –ó–∞—â–∏—â–∞–µ–º—Å—è –æ—Ç –ø–æ–ø—ã—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥—Ä—É–≥–∏–º –ø—É—Ç—è–º
	if r.URL.Path != "/" {
		http.NotFound(w, r)
		return
	}

	http.ServeFile(w, r, "static/index.html")
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ - –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ–∏—à–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func handleFileUpload(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		sendJSONError(w, "–¢–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã, –¥—Ä—É–≥!", http.StatusMethodNotAllowed)
		return
	}

	// –ü–∞—Ä—Å–∏–º multipart —Ñ–æ—Ä–º—É —Å –ª–∏–º–∏—Ç–æ–º —Ä–∞–∑–º–µ—Ä–∞
	if err := r.ParseMultipartForm(maxFileSize); err != nil {
		sendJSONError(w, "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–æ–π", http.StatusBadRequest)
		return
	}

	// –î–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
	message := strings.TrimSpace(r.FormValue("message"))
	if message == "" {
		sendJSONError(w, "–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!", http.StatusBadRequest)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
	file, header, err := r.FormFile("file")
	if err != nil {
		sendJSONError(w, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª: "+err.Error(), http.StatusBadRequest)
		return
	}
	defer file.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
	if !isValidFileType(header.Filename) {
		sendJSONError(w, "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF, JPG, JPEG –∏ PNG —Ñ–∞–π–ª—ã", http.StatusBadRequest)
		return
	}

	log.Printf("–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: %s (—Ä–∞–∑–º–µ—Ä: %d –±–∞–π—Ç)", header.Filename, header.Size)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ n8n
	if err := sendToN8n(message, file, header.Filename); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ n8n: %v", err)
		sendJSONError(w, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç: "+err.Error(), http.StatusInternalServerError)
		return
	}

	log.Printf("–§–∞–π–ª %s —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ n8n", header.Filename)
	sendJSONResponse(w, APIResponse{
		Status:  "success",
		Message: "–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –Ω–∏–∂–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
	})
}

// –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç n8n
func handleN8nWebhook(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		sendJSONError(w, "–¢–æ–ª—å–∫–æ POST", http.StatusMethodNotAllowed)
		return
	}

	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
	body, err := io.ReadAll(r.Body)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è webhook –æ—Ç n8n: %v", err)
		sendJSONError(w, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", http.StatusBadRequest)
		return
	}
	defer r.Body.Close()

	// –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
	var webhookData struct {
		Text   string `json:"text"`
		Status string `json:"status"`
	}

	responseText := ""
	status := "completed"

	// –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª JSON - –ø–∞—Ä—Å–∏–º –µ–≥–æ
	if err := json.Unmarshal(body, &webhookData); err == nil && webhookData.Text != "" {
		responseText = webhookData.Text
		if webhookData.Status != "" {
			status = webhookData.Status
		}
	} else {
		// –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
		responseText = string(body)
	}

	if responseText == "" {
		sendJSONError(w, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç n8n", http.StatusBadRequest)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	response := ProcessingResponse{
		ID:        generateSimpleID(),
		Text:      responseText,
		Timestamp: time.Now(),
		Status:    status,
	}

	responsesMutex.Lock()
	responses = append(responses, response)
	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	if len(responses) > maxResponses {
		responses = responses[len(responses)-maxResponses:]
	}
	responsesMutex.Unlock()

	log.Printf("–ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç n8n: %s... (—Å—Ç–∞—Ç—É—Å: %s)",
		truncateString(responseText, 50), status)

	sendJSONResponse(w, APIResponse{Status: "success", Message: "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω"})
}

// –û—Ç–¥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
func handleGetResults(w http.ResponseWriter, r *http.Request) {
	responsesMutex.RLock()
	data := make([]ProcessingResponse, len(responses))
	copy(data, responses)
	responsesMutex.RUnlock()

	sendJSONResponse(w, APIResponse{
		Status: "success",
		Data:   data,
	})
}

// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
func handleHealthCheck(w http.ResponseWriter, r *http.Request) {
	sendJSONResponse(w, APIResponse{
		Status:  "healthy",
		Message: "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
	})
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ n8n
func sendToN8n(message string, file multipart.File, fileName string) error {
	var buffer bytes.Buffer
	writer := multipart.NewWriter(&buffer)

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
	if err := writer.WriteField("message", message); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %w", err)
	}

	// –ü–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –Ω–∞—á–∞–ª–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
	if seeker, ok := file.(io.Seeker); ok {
		seeker.Seek(0, 0)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
	part, err := writer.CreateFormFile("file", fileName)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–µ –¥–ª—è —Ñ–∞–π–ª–∞: %w", err)
	}

	if _, err := io.Copy(part, file); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª: %w", err)
	}

	if err := writer.Close(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è writer: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å
	req, err := http.NewRequest("POST", n8nWebhookURL, &buffer)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å: %w", err)
	}

	req.Header.Set("Content-Type", writer.FormDataContentType())

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	client := &http.Client{Timeout: 30 * time.Second} // —Ç–∞–π–º–∞—É—Ç –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
	resp, err := client.Do(req)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ n8n: %w", err)
	}
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		body, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("n8n –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É %d: %s", resp.StatusCode, string(body))
	}

	return nil
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
func isValidFileType(filename string) bool {
	ext := strings.ToLower(filepath.Ext(filename))
	validExtensions := []string{".pdf", ".jpg", ".jpeg", ".png"}

	for _, validExt := range validExtensions {
		if ext == validExt {
			return true
		}
	}
	return false
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π ID –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
func generateSimpleID() string {
	return fmt.Sprintf("res_%d", time.Now().UnixNano())
}

// –û–±—Ä–µ–∑–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ª–æ–≥–æ–≤
func truncateString(s string, maxLen int) string {
	if len(s) <= maxLen {
		return s
	}
	return s[:maxLen] + "..."
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON –æ—Ç–≤–µ—Ç
func sendJSONResponse(w http.ResponseWriter, data interface{}) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	if err := json.NewEncoder(w).Encode(data); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
	}
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON –æ—à–∏–±–∫—É
func sendJSONError(w http.ResponseWriter, message string, statusCode int) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(statusCode)

	response := APIResponse{
		Status:  "error",
		Message: message,
	}

	json.NewEncoder(w).Encode(response)
}
